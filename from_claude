I'll help you create a simple human detection script using OpenCV on Raspberry Pi OS. We'll use the HOG (Histogram of Oriented Gradients) detector which is effective for detecting people.



```python
import cv2
import numpy as np
from imutils.object_detection import non_max_suppression
import time

def initialize_camera():
    """Initialize the Raspberry Pi camera"""
    cap = cv2.VideoCapture(0)
    # Set lower resolution for better performance
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    return cap

def detect_humans():
    # Initialize HOG descriptor
    hog = cv2.HOGDescriptor()
    hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())
    
    # Initialize camera
    cap = initialize_camera()
    
    print("Starting human detection. Press 'q' to quit.")
    
    while True:
        # Read frame
        ret, frame = cap.read()
        if not ret:
            break
            
        # Resize frame for faster detection
        frame = cv2.resize(frame, (640, 480))
        
        # Detect humans
        start_time = time.time()
        boxes, weights = hog.detectMultiScale(
            frame,
            winStride=(8, 8),
            padding=(4, 4),
            scale=1.05
        )
        
        # Apply non-max suppression
        boxes = np.array([[x, y, x + w, y + h] for (x, y, w, h) in boxes])
        pick = non_max_suppression(boxes, probs=None, overlapThresh=0.65)
        
        # Draw boxes around detected humans
        for (xA, yA, xB, yB) in pick:
            cv2.rectangle(frame, (xA, yA), (xB, yB), (0, 255, 0), 2)
        
        # Calculate and display FPS
        fps = 1.0 / (time.time() - start_time)
        cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        # Display the number of people detected
        cv2.putText(frame, f"People detected: {len(pick)}", (10, 60),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        # Show frame
        cv2.imshow("Human Detection", frame)
        
        # Break loop if 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Clean up
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    detect_humans()

```

To run this on your Raspberry Pi, first install the required packages:

```bash
sudo apt-get update
sudo apt-get install python3-opencv python3-imutils
```

Then save the code to a file (e.g., `human_detection.py`) and run it:

```bash
python3 human_detection.py
```

Key features of this implementation:
1. Uses HOG detector for human detection
2. Includes FPS counter
3. Shows number of people detected
4. Uses non-max suppression to reduce multiple detections
5. Optimized for Raspberry Pi performance by:
   - Resizing frames to 640x480
   - Using efficient detection parameters
   - Minimizing unnecessary processing

To improve performance if it runs slowly:
1. Reduce the resolution further
2. Increase the `winStride` values
3. Increase the `scale` parameter

Would you like me to explain any part of the code or suggest additional optimizations for your specific Raspberry Pi model?
