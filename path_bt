Using Bluetooth for communication between the ESP32 and the Raspberry Pi can simplify the project by avoiding physical serial connections. Here's an updated implementation integrating the provided Bluetooth code with path memorizing and tracing functionality.


---

ESP32 Code

This code handles Bluetooth communication, obstacle avoidance, and command execution. It sends movement actions to the Raspberry Pi via Bluetooth and receives commands for replaying the path.

#include "BluetoothSerial.h"
#include <NewPing.h>

#define TRIG_PIN 12
#define ECHO_PIN 14
#define MAX_DISTANCE 200
#define MOTOR_LEFT 5
#define MOTOR_RIGHT 4

BluetoothSerial SerialBT;

NewPing sonar(TRIG_PIN, ECHO_PIN, MAX_DISTANCE);

void setup() {
  Serial.begin(115200);       // Debugging on serial monitor
  SerialBT.begin("ESP32Car"); // Bluetooth device name
  Serial.println("Bluetooth initialized. Ready to pair!");

  pinMode(MOTOR_LEFT, OUTPUT);
  pinMode(MOTOR_RIGHT, OUTPUT);
}

void loop() {
  static String command = "";

  // Check for incoming Bluetooth commands
  if (SerialBT.available()) {
    char c = SerialBT.read();
    if (c == '\n') {
      executeCommand(command);
      command = "";
    } else {
      command += c;
    }
  }

  // Obstacle avoidance logic
  int distance = sonar.ping_cm();
  if (distance > 0 && distance < 20) {
    stopMotors();
    SerialBT.println("stop");
  } else {
    moveForward();
    SerialBT.println("forward");
  }

  delay(100);
}

void executeCommand(String cmd) {
  if (cmd == "forward") {
    moveForward();
  } else if (cmd == "left") {
    turnLeft();
  } else if (cmd == "right") {
    turnRight();
  } else if (cmd == "stop") {
    stopMotors();
  }
}

void moveForward() {
  digitalWrite(MOTOR_LEFT, HIGH);
  digitalWrite(MOTOR_RIGHT, LOW);
}

void turnLeft() {
  digitalWrite(MOTOR_LEFT, LOW);
  digitalWrite(MOTOR_RIGHT, HIGH);
}

void turnRight() {
  digitalWrite(MOTOR_LEFT, HIGH);
  digitalWrite(MOTOR_RIGHT, HIGH);
}

void stopMotors() {
  digitalWrite(MOTOR_LEFT, LOW);
  digitalWrite(MOTOR_RIGHT, LOW);
}


---

Raspberry Pi Code

This Python script handles Bluetooth communication, path recording, and path tracing.

Updated Path Memorizing and Tracing Script

from bluetooth import BluetoothSocket, find_service, RFCOMM
import time

# Bluetooth connection details
addr = "08:A6:F7:69:DA:8A"  # Replace with your ESP32's MAC address
buf_size = 1024

# Discover services and connect to ESP32
service_matches = find_service(address=addr)

if len(service_matches) == 0:
    print("No Bluetooth services found. Exiting.")
    exit(1)

first_match = service_matches[0]
port = first_match["port"]
name = first_match["name"]
host = first_match["host"]

print(f"Connecting to \"{name}\" on {host}, port {port}...")
sock = BluetoothSocket(RFCOMM)
sock.connect((host, port))
print("Bluetooth connection established!")

# Path data storage
path_data = []

def record_path():
    """
    Record the car's path while performing obstacle avoidance.
    """
    global path_data
    print("Recording path. Press Ctrl+C to stop.")
    try:
        while True:
            data = sock.recv(buf_size).decode().strip()
            print(f"Action: {data}")
            path_data.append(data)
            time.sleep(0.1)
    except KeyboardInterrupt:
        print("Path recording stopped.")
        save_path()

def save_path():
    """
    Save the recorded path to a file.
    """
    with open("path_data.txt", "w") as f:
        for entry in path_data:
            f.write(f"{entry}\n")
    print("Path saved to 'path_data.txt'.")

def trace_path():
    """
    Replay the recorded path.
    """
    try:
        with open("path_data.txt", "r") as f:
            print("Tracing path...")
            for command in f:
                sock.send(command.strip().encode())
                sock.send("\n".encode())
                print(f"Sent command: {command.strip()}")
                time.sleep(0.5)  # Adjust delay based on action duration
        print("Path tracing completed.")
    except FileNotFoundError:
        print("No path data found. Please record a path first.")

# Main program menu
if __name__ == "__main__":
    while True:
        print("\n1. Record Path")
        print("2. Trace Path")
        print("3. Exit")
        choice = input("Select an option: ")

        if choice == "1":
            record_path()
        elif choice == "2":
            trace_path()
        elif choice == "3":
            print("Exiting...")




If you prefer not to use the NewPing library, we can manually handle the ultrasonic sensor's trigger and echo signals with basic Arduino functions. Here's how the code looks when replacing NewPing with direct control:


---

Updated ESP32 Code Without NewPing

#include "BluetoothSerial.h"

#define TRIG_PIN 12
#define ECHO_PIN 14
#define MOTOR_LEFT 5
#define MOTOR_RIGHT 4

BluetoothSerial SerialBT;

void setup() {
  Serial.begin(115200);       // Debugging on serial monitor
  SerialBT.begin("ESP32Car"); // Bluetooth device name
  Serial.println("Bluetooth initialized. Ready to pair!");

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(MOTOR_LEFT, OUTPUT);
  pinMode(MOTOR_RIGHT, OUTPUT);
}

void loop() {
  static String command = "";

  // Check for incoming Bluetooth commands
  if (SerialBT.available()) {
    char c = SerialBT.read();
    if (c == '\n') {
      executeCommand(command);
      command = "";
    } else {
      command += c;
    }
  }

  // Obstacle avoidance logic
  int distance = getDistance();
  if (distance > 0 && distance < 20) {
    stopMotors();
    SerialBT.println("stop");
  } else {
    moveForward();
    SerialBT.println("forward");
  }

  delay(100);
}

void executeCommand(String cmd) {
  if (cmd == "forward") {
    moveForward();
  } else if (cmd == "left") {
    turnLeft();
  } else if (cmd == "right") {
    turnRight();
  } else if (cmd == "stop") {
    stopMotors();
  }
}

void moveForward() {
  digitalWrite(MOTOR_LEFT, HIGH);
  digitalWrite(MOTOR_RIGHT, LOW);
}

void turnLeft() {
  digitalWrite(MOTOR_LEFT, LOW);
  digitalWrite(MOTOR_RIGHT, HIGH);
}

void turnRight() {
  digitalWrite(MOTOR_LEFT, HIGH);
  digitalWrite(MOTOR_RIGHT, HIGH);
}

void stopMotors() {
  digitalWrite(MOTOR_LEFT, LOW);
  digitalWrite(MOTOR_RIGHT, LOW);
}

int getDistance() {
  // Send a 10µs pulse to the TRIG pin
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  // Measure the duration of the pulse on the ECHO pin
  long duration = pulseIn(ECHO_PIN, HIGH);

  // Convert the duration to distance in centimeters
  int distance = duration * 0.034 / 2; // Speed of sound: 0.034 cm/µs
  return distance;
}


---

Key Changes

1. Ultrasonic Sensor Handling:

A manual implementation using digitalWrite to send a trigger pulse and pulseIn to measure the echo pulse width.

The formula distance = duration * 0.034 / 2 converts the echo duration to distance in centimeters.



2. Bluetooth Communication and Motors:

Functionality remains the same, with Bluetooth commands controlling the motors and sending feedback to the Raspberry Pi.





---

Let me know if you need further modifications or help with testing!





##############   VERIFIED CODE FOR ESP PATH MEM ######################



#include <BluetoothSerial.h>
#include <ESP32Servo.h>

#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to enable it
#endif

// Ultrasonic Sensor Pins
const int trigPin = 18;  // TRIG pin of the ultrasonic sensor
const int echoPin = 5;   // ECHO pin of the ultrasonic sensor

// Motor Driver Pins
const int enA = 13;      // Enable pin for Motor A
const int in1 = 33;      // Motor A direction control pin
const int in2 = 32;      // Motor A direction control pin
const int enB = 23;      // Enable pin for Motor B
const int in3 = 21;      // Motor B direction control pin
const int in4 = 22;      // Motor B direction control pin

// Servo Motor Pin
const int servoPin = 25;

// Define PWM channels and resolution
const int pwmChannelA = 2;
const int pwmChannelB = 3;
const int pwmFreq = 1000; // PWM frequency in Hz
const int pwmResolution = 8;

BluetoothSerial SerialBT;

void setup() {
  Serial.begin(115200);       // Initialize serial communication
  SerialBT.begin("ESP32Car"); // Bluetooth device name
  Serial.println("The device started, now you can pair it with Bluetooth!");

  // Motor pins setup
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  ledcSetup(pwmChannelA, pwmFreq, pwmResolution);
  ledcSetup(pwmChannelB, pwmFreq, pwmResolution);
  ledcAttachPin(enA, pwmChannelA);
  ledcAttachPin(enB, pwmChannelB);

  // Ultrasonic sensor pins setup
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Servo motor setup
  Servo myServo;
  myServo.attach(servoPin);
  myServo.write(90); // Center position
}

void loop() {
  static String command = "";

  // Read Bluetooth data and handle commands
  if (SerialBT.available()) {
    char c = SerialBT.read();
    if (c == '\n') { // End of command
      executeCommand(command);
      command = "";
    } else {
      command += c;
    }
  }

  // Check for serial input for debugging (optional)
  if (Serial.available()) {
    SerialBT.write(Serial.read());
  }

  // Obstacle detection
  int distance = getDistance();
  if (distance > 0 && distance < 20) {
    stopCar();
    SerialBT.println("stop");
  } else {
    moveForward();
    SerialBT.println("forward");
  }

  delay(100);
}

// Execute movement commands
void executeCommand(String cmd) {
  if (cmd == "forward") {
    moveForward();
  } else if (cmd == "left") {
    turnLeft();
  } else if (cmd == "right") {
    turnRight();
  } else if (cmd == "stop") {
    stopCar();
  }
}

// Functions to control motor movement
// Function to move forward
void moveForward() {
  ledcWrite(pwmChannelA, 150); // Set speed (0-255)
  ledcWrite(pwmChannelB, 150); // Set speed (0-255)
  digitalWrite(in1, HIGH);     // Motor A forward
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);      // Motor B forward
  digitalWrite(in4, HIGH);
  Serial.println("Moving forward");
}

// Function to stop the car
void stopCar() {
  ledcWrite(pwmChannelA, 0);   // Stop Motor A
  ledcWrite(pwmChannelB, 0);   // Stop Motor B
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  Serial.println("Stopping car");
}

// Function to move backward
void moveBackward() {
  ledcWrite(pwmChannelA, 150); // Set speed (0-255)
  ledcWrite(pwmChannelB, 150); // Set speed (0-255)
  digitalWrite(in1, LOW);      // Motor A backward
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);     // Motor B backward
  digitalWrite(in4, LOW);
  Serial.println("Moving backward");
}

// Function to turn left
void turnLeft() {
  ledcWrite(pwmChannelA, 100); // Reduced speed for turn
  ledcWrite(pwmChannelB, 100);
  digitalWrite(in1, HIGH);     // Motor A forward
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);     // Motor B backward
  digitalWrite(in4, LOW);
  Serial.println("Turning left");
  delay(2000);                 // Turn duration
  stopCar();
}

// Function to turn right
void turnRight() {
  ledcWrite(pwmChannelA, 100); // Reduced speed for turn
  ledcWrite(pwmChannelB, 100);
  digitalWrite(in1, LOW);      // Motor A backward
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);      // Motor B forward
  digitalWrite(in4, HIGH);
  Serial.println("Turning right");
  delay(2000);                 // Turn duration
  stopCar();
}


// Ultrasonic distance measurement
int getDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.034 / 2; // Convert duration to centimeters
  return distance;
}









####################### EXPLANATION ################################


### Explanation of the Code

This code enables an ESP32-based robot car to receive Bluetooth commands, move in different directions, and avoid obstacles using an ultrasonic sensor. It also integrates a servo motor for additional control. Below is an explanation of the key components:

---

#### **1. Bluetooth Communication (`BluetoothSerial`)**
- **Initialization:**
  ```cpp
  SerialBT.begin("ESP32Car");
  ```
  This sets up Bluetooth communication with the device name "ESP32Car." A smartphone or another device can pair with it to send commands.

- **Command Handling:**
  ```cpp
  if (SerialBT.available()) {
      char c = SerialBT.read();
      ...
      executeCommand(command);
  }
  ```
  Commands received via Bluetooth (e.g., "forward," "stop") are processed in the `executeCommand()` function.

---

#### **2. Motor Control**
The car uses motor driver pins connected to the ESP32 to control two motors.

- **PWM Configuration:**
  ```cpp
  ledcSetup(pwmChannelA, pwmFreq, pwmResolution);
  ledcAttachPin(enA, pwmChannelA);
  ledcSetup(pwmChannelB, pwmFreq, pwmResolution);
  ledcAttachPin(enB, pwmChannelB);
  ```
  These lines set up Pulse Width Modulation (PWM) to control the speed of the motors.

- **Movement Functions:**
  Functions like `moveForward`, `moveBackward`, `turnLeft`, and `turnRight` adjust the motor pins and PWM output to achieve the desired motion.

---

#### **3. Obstacle Detection**
- **Ultrasonic Sensor Setup:**
  ```cpp
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  ```
  The `trigPin` sends a sound wave pulse, and the `echoPin` listens for its reflection to calculate distance.

- **Distance Calculation:**
  ```cpp
  long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.034 / 2;
  ```
  The function `getDistance()` calculates the distance to an obstacle in centimeters.

- **Behavior Based on Distance:**
  ```cpp
  if (distance > 0 && distance < 20) {
      stopCar();
  } else {
      moveForward();
  }
  ```
  If an obstacle is detected within 20 cm, the car stops. Otherwise, it moves forward.

---

#### **4. Servo Motor**
- **Servo Initialization:**
  ```cpp
  Servo myServo;
  myServo.attach(servoPin);
  myServo.write(90);
  ```
  The servo motor is attached to a pin and initially set to the center position (90 degrees). It can later be used for steering or scanning for obstacles.

---

### How It Could Show a Map

To visualize a map or trace the environment:
1. **Servo for Scanning:**
   Attach the ultrasonic sensor to the servo motor. The servo can rotate and scan the surroundings while the ultrasonic sensor measures distances.

   - For example:
     ```cpp
     for (int angle = 0; angle <= 180; angle += 10) {
         myServo.write(angle);
         delay(500);
         int distance = getDistance();
         SerialBT.print("Angle: ");
         SerialBT.print(angle);
         SerialBT.print(" Distance: ");
         SerialBT.println(distance);
     }
     ```

   This sends distance readings for different angles via Bluetooth, which you can visualize using a custom app or software.

2. **Data Collection:**
   Log the scanned distances and angles to build a rudimentary map.

---

### How It Will Remember and Trace Back

The ESP32 doesn’t have built-in memory to store complex maps or paths. However, here are some strategies:

#### **1. Path Logging**
- Store every movement command (e.g., "forward", "left") in an array or list.
- Use this log to replay the movements in reverse to trace back.

   Example:
   ```cpp
   String pathLog[100]; // Array to log movements
   int logIndex = 0;

   void executeCommand(String cmd) {
       pathLog[logIndex++] = cmd; // Log the command
       if (cmd == "forward") moveForward();
       if (cmd == "left") turnLeft();
       if (cmd == "right") turnRight();
       if (cmd == "stop") stopCar();
   }

   void traceBack() {
       for (int i = logIndex - 1; i >= 0; i--) {
           // Reverse commands (e.g., "forward" -> "backward")
           if (pathLog[i] == "forward") moveBackward();
           if (pathLog[i] == "left") turnRight();
           if (pathLog[i] == "right") turnLeft();
       }
   }
   ```

---

#### **2. Persistent Storage**
- Use the ESP32's flash memory (e.g., SPIFFS or EEPROM) to save paths and recall them even after the device is turned off.

   Example:
   ```cpp
   #include <EEPROM.h>
   void savePath(String path) {
       for (int i = 0; i < path.length(); i++) {
           EEPROM.write(i, path[i]);
       }
       EEPROM.commit();
   }

   String loadPath() {
       String path = "";
       for (int i = 0; i < EEPROM.length(); i++) {
           path += char(EEPROM.read(i));
       }
       return path;
   }
   ```

---

### Limitations and Considerations
- **Processing Power:** ESP32 can handle basic pathfinding but isn’t suited for advanced SLAM (Simultaneous Localization and Mapping).
- **External Tools:** For a more robust solution, connect the ESP32 to a Raspberry Pi or another computer for map visualization and more complex computations. 

Let me know if you'd like examples for any specific functionality!
